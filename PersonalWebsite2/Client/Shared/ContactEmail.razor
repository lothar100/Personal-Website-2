@inject SpaService _SPA

        <div class="container pb-3">
            <div class="card" style="max-width: 90rem">
                <div id="contactEmail" class="card-body">
                    <h3 class="card-title">Contact Me</h3>
                    <EditForm Model="@Model" OnValidSubmit="SendEmail" @onkeydown="ClearMessages">
                        <DataAnnotationsValidator />

                        <div class="pl-1 pt-2">
                            <label class="mb-1" for="name">
                                <span class="oi oi-person"></span>
                                @Helper.DisplayNameFor(typeof(ContactEmailModel), "Name")
                            </label>
                        </div>
                        <div>
                            <InputText class="card-text form-control form-control-sm" style="max-width:576px" type="text" id="name" placeholder="Enter Name" @bind-Value="@Model.Name"></InputText>
                            <ValidationMessage For="@(() => Model.Name)" />
                        </div>
                        
                        <div class="pl-1 pt-2">
                            <label class="mb-1" for="name">
                                <span class="oi oi-envelope-closed"></span>
                                @Helper.DisplayNameFor(typeof(ContactEmailModel), "EmailAddress")
                            </label>
                        </div>
                        <div>
                            <InputText class="card-text form-control form-control-sm" style="max-width:576px" type="text" id="email" placeholder="Enter Email" @bind-Value="@Model.EmailAddress"></InputText>
                            <ValidationMessage For="@(() => Model.EmailAddress)" />
                        </div>
                        
                        <div class="pl-1 pt-2">
                            <label class="mb-1" for="name">
                                <span class="oi oi-comment-square"></span>
                                @Helper.DisplayNameFor(typeof(ContactEmailModel), "Message")
                            </label>
                        </div>
                        <div>
                            <InputTextArea class="card-text form-control form-control-sm custom-textarea" style="max-width:576px" type="text" id="message" placeholder="Type Your Message" rows="@Model.Message.RowCount()" @bind-Value="@Model.Message" @oninput="BindMessage"></InputTextArea>
                            <ValidationMessage For="@(() => Model.Message)" />
                        </div>

                        <div class="pt-2">
                            <button type="submit" class="btn btn-outline-dark btn-sm">Send</button>
                            <AlertText Class="success" Text="@SuccessMessage" />
                            <AlertText Class="warning" Text="@StatusMessage" />
                            <AlertText Class="danger" Text="@ErrorMessage" />
                        </div>
                    </EditForm>
                </div>

            </div>
        </div>

@code {
    string SuccessMessage;
    string StatusMessage;
    string ErrorMessage;

    ContactEmailModel Model = new ContactEmailModel();

    private void BindMessage(ChangeEventArgs e)
    {
        Model.Message = e.Value.ToString();
    }

    private async Task SendEmail()
    {
        StatusMessage = "Sending...";

        await Task.Delay(100);

        try
        {
            await _SPA.PostEmailAsync(Model);
            UpdateAfterSend();
        }
        catch
        {
            StatusMessage = null;
            ErrorMessage = "Error. Email failed to send.";
        }

    }

    private void UpdateAfterSend()
    {
        ErrorMessage = null;
        StatusMessage = null;
        Model = new ContactEmailModel();
        SuccessMessage = "Email Sent";
    }

    private void ClearMessages()
    {
        SuccessMessage = null;
        StatusMessage = null;
        ErrorMessage = null;
    }
}
